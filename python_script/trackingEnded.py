import psycopg2
import logging
from psycopg2 import sql

# Set up logging configuration
logging.basicConfig(
    filename='update_tracking.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Connection to the PostgreSQL database
try:
    conn = psycopg2.connect(
        database="intemocrawldb",
        user="postgresadmin",
        password="admin123",
        host="ac964fac6ab294dee95ce07b2ee1c7bc-2129220997.ap-south-1.elb.amazonaws.com",
        port="5432"
    )
    cursor = conn.cursor()
    logging.info("Connected to the database.")
except Exception as e:
    logging.error(f"Failed to connect to the database: {str(e)}")
    exit()

# List of AWB numbers (You can provide the AWB numbers dynamically if needed)
awb_numbers = [
    "071-53375556", "807-14103191", "176-72275781", "217-01431861", "217-01123290", "235-89134651",
    "071-53060792", "807-14103180", "217-98772973", "807-70003080", "229-16947604", "071-53368431",
    "312-94534031", "235-89210914", "071-53078760", "071-53078771", "176-72262400", "001-85562466",
    "932-75296701", "703-12502851", "703-12502873", "228-19192913", "157-32055575", "217-99158500",
    "228-19182833", "228-19179661", "176-00009999", "312-94190353", "071-50795065", "514-07018410",
    "603-60389405", "603-60389416", "125-13360535", "071-53369061", "176-74108031", "157-30247700",
    "312-94659143", "020-23652661", "618-20860696", "217-01117966", "235-89338476", "312-94534064",
    "312-94534075", "125-90248432", "157-49380671", "131-32524026", "098-03186315", "312-94659110",
    "235-39156246", "098-03186330", "312-94659121", "157-33022964", "157-38389551", "098-02466391",
    "125-90248410", "312-94534053", "312-94534042", "098-02466170", "125-90248395", "098-05108983",
    "235-88455721", "615-61058270", "020-03467225", "615-61063170", "615-61057850", "157-33023185",
    "618-35213780", "235-89210833", "235-89210822", "020-22157122", "125-90248373", "125-10052022",
    "160-81138676", "071-53568513", "217-01055460", "125-90248351", "235-89210870", "125-90248336",
    "071-53568491", "125-90248325", "125-90248314", "125-90248292", "071-52523730", "157-35380155",
    "014-31673880", "020-27373544", "125-90248281", "312-94659084", "160-81138503", "071-53078874",
    "098-09422781", "098-09178890", "071-53078826", "071-53078815", "618-34138834", "235-89338384",
    "071-53370096", "618-69116913", "071-53367226", "235-89348685", "020-20295682", "071-53078782",
    "071-53078863", "071-53078885", "071-53078830", "618-67601251", "071-53078793", "160-81138536",
    "312-94610784", "125-90248270", "514-07015934", "312-94533972", "312-94533983", "098-09496826",
    "235-89614696", "157-33017110", "071-53083785", "071-53083800", "125-12664072", "217-01110642",
    "125-90248255", "160-81138341", "125-90248244", "071-53083763", "071-53083752", "125-11493075",
    "618-34365074", "618-34365085", "125-90248233", "071-53073171", "057-50638022", "071-53072865",
    "160-81138190", "071-53078852", "071-53078841", "071-53078804", "125-11011195", "555-07771923",
    "125-90248222", "312-94561600", "615-04713310", "057-50637801", "176-70074830", "615-04719072",
    "217-98772984", "235-89136972", "157-90049131", "176-70932212", "615-04720321", "176-70073802",
    "160-81138105", "160-78757781", "098-20147665", "807-70003021", "228-19206666", "176-71025511",
    "176-71025496", "607-29502583", "176-74107574", "807-70002995", "157-97009894", "071-53567021",
    "157-33023211", "232-59932272", "228-19173814", "176-70954914", "176-74069800", "618-67117875",
    "176-73705074", "057-52320461", "176-74107736", "071-53568561", "157-33023141", "157-33022990",
    "157-35387763", "312-98037133", "160-82987660", "071-53367624", "157-90049175", "071-53367510",
    "176-73694740", "176-73693336", "176-70984093", "176-70984163", "176-70080894", "807-15111386",
    "176-70983850", "176-22222222", "176-70080846", "176-70983846", "176-70983953", "176-70983916",
    "176-70983931", "176-70983802", "176-70077884", "176-70077873", "176-70077836", "176-70983813",
    "176-70077814", "071-53069170", "176-70074793", "176-71492256", "176-70075946", "176-70077803",
    "176-70983706", "807-70003032", "176-70983710", "176-99746850", "228-19217531", "157-33017025",
    "807-14143802", "176-70954435", "228-19216551", "176-70076016", "228-19214521", "807-14143791",
    "228-19212664", "228-19214510", "807-15111272", "176-70069532", "228-19211695", "228-19210332",
    "157-92888515", "176-70932083", "157-30243474", "176-70069484", "228-19210155", "176-99597993",
    "176-72249984", "228-19209713", "807-14143780", "176-71472122", "176-71419681", "176-70931906",
    "176-70055775", "807-70003006", "176-99597923", "176-72249785", "176-70931840", "176-70487325",
    "176-72230454", "176-99597831", "228-19205163", "607-34603800", "176-70064643", "176-72249730",
    "176-70064551", "176-70931652", "228-19204522", "176-70063114", "176-70487196", "932-75292615",
    "228-19195455", "176-99572351", "932-75288861", "932-75251540", "176-70047574", "932-75251551",
    "932-75251525", "098-20147772", "071-52037381", "071-51244686", "217-98764901", "217-99152561",
    "217-99152550", "228-95310622", "228-19044955", "228-19163631", "228-19164003", "071-51763913",
    "071-49195311", "071-51244303", "071-49195462", "071-49195414", "071-49195392", "071-51230325",
    "071-51244373", "071-51244336", "071-51244314", "607-29502594", "607-32143204", "607-32143182",
    "607-32143293", "607-32143260", "607-32143171", "607-29502505", "607-29502516", "057-53087624",
    "057-53087502", "057-53087491", "057-53087470", "057-53087426", "607-34603822", "607-32143237",
    "607-32143215", "607-32143149", "607-29502561", "057-53087680", "057-53087535", "057-53087459",
    "607-34603844", "071-52037402", "071-53368420", "071-53368431", "071-50795043", "157-32055575",
    "071-53060792", "157-30247700", "071-53367635", "071-53368453", "071-52037202", "071-53368464",
    "071-53368475", "071-53369061", "071-53367646", "071-53368486", "071-53368497", "071-53369072",
    "071-53368508", "071-53368519", "071-53369083", "071-53367657", "071-53368530", "071-53368541",
    "071-53369094", "071-53368552", "071-53367668", "071-53368563", "071-53368574", "071-53369005",
    "071-53368585", "071-53367679", "071-53368596", "071-53367690", "071-53367702", "071-53369016",
    "071-53368552", "071-53368563", "071-53369094", "071-53367690", "071-53369016", "071-53368464",
    "071-53368475", "071-53369061", "071-53367646", "071-53368486", "071-53368497", "071-53369072",
    "071-53368508", "071-53368519", "071-53369083", "071-53367657", "071-53368530", "071-53368541",
    "071-53369094", "071-53368552", "071-53367668", "071-53368563", "071-53368574", "071-53369005",
    "071-53368585", "071-53367679", "071-53368596", "071-53367690", "071-53369016", "071-53367702",
    "071-53368552", "071-53368563", "071-53369094", "071-53367690", "071-53369016", "071-53368464",
    "071-53368475", "071-53369061", "071-53367646", "071-53368486", "071-53368497", "071-53369072",
    "071-53368508", "071-53368519", "071-53369083", "071-53367657", "071-53368530", "071-53368541",
    "071-53369094", "071-53368552", "071-53367668", "071-53368563", "071-53368574", "071-53369005",
    "071-53368585", "071-53367679", "071-53368596", "071-53367690", "071-53369016", "071-53367702"
]   # Example AWB numbers

# Iterate through each AWB number and apply the logic
for awb in awb_numbers:
    try:
        logging.info(f"\nProcessing AWB: {awb}")

        # Fetch the current `UpdatedSection` and `IsEnded` flag from the table
        cursor.execute(
            """
            SELECT "UpdatedSection", "IsEnded" 
            FROM "UserTrackings" 
            WHERE "AwbNumber" = %s;
            """, (awb,)
        )

        result = cursor.fetchone()
        if result is None:
            logging.warning(f"AWB: {awb} not found in the database.")
            continue

        updated_section = result[0]
        is_ended = result[1]

        logging.info(f"Initial UpdatedSection: {updated_section}")
        logging.info(f"Initial IsEnded: {is_ended}")

        # Step 1: If UpdatedSection is not empty and IsEnded is False
        if updated_section and not is_ended:
            logging.info(f"AWB: {awb} -> UpdatedSection not empty and IsEnded False")
            # Step 1: Set IsEnded Flag to True
            cursor.execute(
                """
                UPDATE "UserTrackings"
                SET "IsEnded" = TRUE
                WHERE "AwbNumber" = %s;
                """, (awb,)
            )
            conn.commit()
            logging.info(f"AWB: {awb} -> IsEnded set to True")

        # Step 2: If UpdatedSection is not empty and IsEnded is True
        elif updated_section and is_ended:
            logging.info(f"AWB: {awb} -> UpdatedSection not empty and IsEnded True")
            # Step 1: Set IsEnded Flag to False
            cursor.execute(
                """
                UPDATE "UserTrackings"
                SET "IsEnded" = FALSE
                WHERE "AwbNumber" = %s;
                """, (awb,)
            )
            conn.commit()
            logging.info(f"AWB: {awb} -> IsEnded set to False")

            # Step 3: Reset IsEnded Flag to True
            cursor.execute(
                """
                UPDATE "UserTrackings"
                SET "IsEnded" = TRUE
                WHERE "AwbNumber" = %s;
                """, (awb,)
            )
            conn.commit()
            logging.info(f"AWB: {awb} -> IsEnded set to True again")

        # Step 3: If UpdatedSection is empty and IsEnded is False
        elif not updated_section and not is_ended:
            logging.info(f"AWB: {awb} -> UpdatedSection empty and IsEnded False")
            # Step 1: Change UpdatedSection to the JSON structure
            new_updated_section = '{"Section":"Header","Tries":100,"Fails":0}'
            cursor.execute(
                """
                UPDATE "UserTrackings"
                SET "UpdatedSection" = %s, "IsEnded" = TRUE
                WHERE "AwbNumber" = %s;
                """, (new_updated_section, awb)
            )
            conn.commit()
            logging.info(f"AWB: {awb} -> UpdatedSection set to {new_updated_section}, IsEnded set to True")

        # Step 4: If UpdatedSection is empty and IsEnded is True
        elif not updated_section and is_ended:
            logging.info(f"AWB: {awb} -> UpdatedSection empty and IsEnded True")
            # Step 1: Set IsEnded Flag to False
            cursor.execute(
                """
                UPDATE "UserTrackings"
                SET "IsEnded" = FALSE
                WHERE "AwbNumber" = %s;
                """, (awb,)
            )
            conn.commit()
            logging.info(f"AWB: {awb} -> IsEnded set to False")

            # Step 3: Change UpdatedSection to the JSON structure and Set IsEnded to True
            new_updated_section = '{"Section":"Header","Tries":100,"Fails":0}'
            cursor.execute(
                """
                UPDATE "UserTrackings"
                SET "UpdatedSection" = %s, "IsEnded" = TRUE
                WHERE "AwbNumber" = %s;
                """, (new_updated_section, awb)
            )
            conn.commit()
            logging.info(f"AWB: {awb} -> UpdatedSection set to {new_updated_section}, IsEnded set to True")

    except Exception as e:
        # Catch and log the error if something goes wrong
        logging.error(f"Error processing AWB: {awb} -> {str(e)}")

# Close the cursor and connection
cursor.close()
conn.close()

logging.info("Update completed.")
